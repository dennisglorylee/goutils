// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace ws {
class P_DISPLACE;
struct P_DISPLACEDefaultTypeInternal;
extern P_DISPLACEDefaultTypeInternal _P_DISPLACE_default_instance_;
}  // namespace ws
PROTOBUF_NAMESPACE_OPEN
template<> ::ws::P_DISPLACE* Arena::CreateMaybeMessage<::ws::P_DISPLACE>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ws {

enum P_BASE : int {
  none = 0,
  s2c_err_displace = 2147483647,
  P_BASE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  P_BASE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool P_BASE_IsValid(int value);
constexpr P_BASE P_BASE_MIN = none;
constexpr P_BASE P_BASE_MAX = s2c_err_displace;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* P_BASE_descriptor();
template<typename T>
inline const std::string& P_BASE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, P_BASE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function P_BASE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    P_BASE_descriptor(), enum_t_value);
}
inline bool P_BASE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, P_BASE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<P_BASE>(
    P_BASE_descriptor(), name, value);
}
// ===================================================================

class P_DISPLACE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ws.P_DISPLACE) */ {
 public:
  inline P_DISPLACE() : P_DISPLACE(nullptr) {}
  ~P_DISPLACE() override;
  explicit PROTOBUF_CONSTEXPR P_DISPLACE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P_DISPLACE(const P_DISPLACE& from);
  P_DISPLACE(P_DISPLACE&& from) noexcept
    : P_DISPLACE() {
    *this = ::std::move(from);
  }

  inline P_DISPLACE& operator=(const P_DISPLACE& from) {
    CopyFrom(from);
    return *this;
  }
  inline P_DISPLACE& operator=(P_DISPLACE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P_DISPLACE& default_instance() {
    return *internal_default_instance();
  }
  static inline const P_DISPLACE* internal_default_instance() {
    return reinterpret_cast<const P_DISPLACE*>(
               &_P_DISPLACE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(P_DISPLACE& a, P_DISPLACE& b) {
    a.Swap(&b);
  }
  inline void Swap(P_DISPLACE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P_DISPLACE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  P_DISPLACE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<P_DISPLACE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P_DISPLACE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const P_DISPLACE& from) {
    P_DISPLACE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P_DISPLACE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ws.P_DISPLACE";
  }
  protected:
  explicit P_DISPLACE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldIpFieldNumber = 1,
    kNewIpFieldNumber = 2,
    kTsFieldNumber = 3,
  };
  // bytes old_ip = 1;
  void clear_old_ip();
  const std::string& old_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_old_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_old_ip();
  PROTOBUF_NODISCARD std::string* release_old_ip();
  void set_allocated_old_ip(std::string* old_ip);
  private:
  const std::string& _internal_old_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_ip(const std::string& value);
  std::string* _internal_mutable_old_ip();
  public:

  // bytes new_ip = 2;
  void clear_new_ip();
  const std::string& new_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_new_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_new_ip();
  PROTOBUF_NODISCARD std::string* release_new_ip();
  void set_allocated_new_ip(std::string* new_ip);
  private:
  const std::string& _internal_new_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_ip(const std::string& value);
  std::string* _internal_mutable_new_ip();
  public:

  // int64 ts = 3;
  void clear_ts();
  int64_t ts() const;
  void set_ts(int64_t value);
  private:
  int64_t _internal_ts() const;
  void _internal_set_ts(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ws.P_DISPLACE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_ip_;
    int64_t ts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// P_DISPLACE

// bytes old_ip = 1;
inline void P_DISPLACE::clear_old_ip() {
  _impl_.old_ip_.ClearToEmpty();
}
inline const std::string& P_DISPLACE::old_ip() const {
  // @@protoc_insertion_point(field_get:ws.P_DISPLACE.old_ip)
  return _internal_old_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void P_DISPLACE::set_old_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.old_ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ws.P_DISPLACE.old_ip)
}
inline std::string* P_DISPLACE::mutable_old_ip() {
  std::string* _s = _internal_mutable_old_ip();
  // @@protoc_insertion_point(field_mutable:ws.P_DISPLACE.old_ip)
  return _s;
}
inline const std::string& P_DISPLACE::_internal_old_ip() const {
  return _impl_.old_ip_.Get();
}
inline void P_DISPLACE::_internal_set_old_ip(const std::string& value) {
  
  _impl_.old_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* P_DISPLACE::_internal_mutable_old_ip() {
  
  return _impl_.old_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* P_DISPLACE::release_old_ip() {
  // @@protoc_insertion_point(field_release:ws.P_DISPLACE.old_ip)
  return _impl_.old_ip_.Release();
}
inline void P_DISPLACE::set_allocated_old_ip(std::string* old_ip) {
  if (old_ip != nullptr) {
    
  } else {
    
  }
  _impl_.old_ip_.SetAllocated(old_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.old_ip_.IsDefault()) {
    _impl_.old_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ws.P_DISPLACE.old_ip)
}

// bytes new_ip = 2;
inline void P_DISPLACE::clear_new_ip() {
  _impl_.new_ip_.ClearToEmpty();
}
inline const std::string& P_DISPLACE::new_ip() const {
  // @@protoc_insertion_point(field_get:ws.P_DISPLACE.new_ip)
  return _internal_new_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void P_DISPLACE::set_new_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.new_ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ws.P_DISPLACE.new_ip)
}
inline std::string* P_DISPLACE::mutable_new_ip() {
  std::string* _s = _internal_mutable_new_ip();
  // @@protoc_insertion_point(field_mutable:ws.P_DISPLACE.new_ip)
  return _s;
}
inline const std::string& P_DISPLACE::_internal_new_ip() const {
  return _impl_.new_ip_.Get();
}
inline void P_DISPLACE::_internal_set_new_ip(const std::string& value) {
  
  _impl_.new_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* P_DISPLACE::_internal_mutable_new_ip() {
  
  return _impl_.new_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* P_DISPLACE::release_new_ip() {
  // @@protoc_insertion_point(field_release:ws.P_DISPLACE.new_ip)
  return _impl_.new_ip_.Release();
}
inline void P_DISPLACE::set_allocated_new_ip(std::string* new_ip) {
  if (new_ip != nullptr) {
    
  } else {
    
  }
  _impl_.new_ip_.SetAllocated(new_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.new_ip_.IsDefault()) {
    _impl_.new_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ws.P_DISPLACE.new_ip)
}

// int64 ts = 3;
inline void P_DISPLACE::clear_ts() {
  _impl_.ts_ = int64_t{0};
}
inline int64_t P_DISPLACE::_internal_ts() const {
  return _impl_.ts_;
}
inline int64_t P_DISPLACE::ts() const {
  // @@protoc_insertion_point(field_get:ws.P_DISPLACE.ts)
  return _internal_ts();
}
inline void P_DISPLACE::_internal_set_ts(int64_t value) {
  
  _impl_.ts_ = value;
}
inline void P_DISPLACE::set_ts(int64_t value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:ws.P_DISPLACE.ts)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ws

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ws::P_BASE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ws::P_BASE>() {
  return ::ws::P_BASE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
